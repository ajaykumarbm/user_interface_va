//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer View
// {
//
//   row_major float4x4 View_View_RelativeWorldToClip;// Offset:   64 Size:    64
//   row_major float4x4 View_View_ViewToClip;// Offset:  448 Size:    64
//   row_major float4x4 View_View_SVPositionToTranslatedWorld;// Offset:  704 Size:    64
//   float3 View_View_ViewTilePosition; // Offset:  960 Size:    12
//   float3 View_View_MatrixTilePosition;// Offset:  976 Size:    12
//   float3 View_View_ViewForward;      // Offset:  992 Size:    12
//   float4 View_View_InvDeviceZToWorldZTransform;// Offset: 1072 Size:    16
//   float4 View_View_ScreenPositionScaleBias;// Offset: 1088 Size:    16
//   float3 View_View_RelativePreViewTranslation;// Offset: 1152 Size:    12
//   float4 View_View_ViewRectMin;      // Offset: 1984 Size:    16
//   float4 View_View_ViewSizeAndInvSize;// Offset: 2000 Size:    16
//   float4 View_View_LightProbeSizeRatioAndInvSizeRatio;// Offset: 2016 Size:    16
//   float4 View_View_BufferSizeAndInvSize;// Offset: 2032 Size:    16
//   int View_View_NumSceneColorMSAASamples;// Offset: 2080 Size:     4
//   float View_View_PreExposure;       // Offset: 2084 Size:     4
//   float4 View_View_DiffuseOverrideParameter;// Offset: 2096 Size:    16
//   float4 View_View_SpecularOverrideParameter;// Offset: 2112 Size:    16
//   float4 View_View_NormalOverrideParameter;// Offset: 2128 Size:    16
//   float2 View_View_RoughnessOverrideParameter;// Offset: 2144 Size:     8
//   float View_View_OutOfBoundsMask;   // Offset: 2160 Size:     4
//   float View_View_UnlitViewmodeMask; // Offset: 2240 Size:     4
//   float3 View_View_PrecomputedIndirectSpecularColorScale;// Offset: 2480 Size:    12
//   float View_View_RenderingReflectionCaptureMask;// Offset: 2860 Size:     4
//   float View_View_ReflectionCubemapMaxMip;// Offset: 3048 Size:     4
//   float View_View_ShowDecalsMask;    // Offset: 3052 Size:     4
//   float View_View_IndirectCapsuleSelfShadowingIntensity;// Offset: 3060 Size:     4
//   float3 View_View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;// Offset: 3072 Size:    12
//   float3 View_View_VolumetricFogInvGridSize;// Offset: 3568 Size:    12
//   float3 View_View_VolumetricFogGridZParams;// Offset: 3584 Size:    12
//   float3 View_View_VolumetricLightmapWorldToUVScale;// Offset: 3616 Size:    12
//   float3 View_View_VolumetricLightmapWorldToUVAdd;// Offset: 3632 Size:    12
//   float3 View_View_VolumetricLightmapIndirectionTextureSize;// Offset: 3648 Size:    12
//   float View_View_VolumetricLightmapBrickSize;// Offset: 3660 Size:     4
//   float3 View_View_VolumetricLightmapBrickTexelSize;// Offset: 3664 Size:    12
//   float View_View_MinRoughness;      // Offset: 3816 Size:     4
//
// }
//
// cbuffer InstancedView
// {
//
//   row_major float4x4 InstancedView_InstancedView_RelativeWorldToClip;// Offset:   64 Size:    64
//   row_major float4x4 InstancedView_InstancedView_ViewToClip;// Offset:  448 Size:    64
//   row_major float4x4 InstancedView_InstancedView_SVPositionToTranslatedWorld;// Offset:  704 Size:    64
//   float3 InstancedView_InstancedView_ViewTilePosition;// Offset:  960 Size:    12
//   float3 InstancedView_InstancedView_MatrixTilePosition;// Offset:  976 Size:    12
//   float3 InstancedView_InstancedView_ViewForward;// Offset:  992 Size:    12
//   float4 InstancedView_InstancedView_ScreenPositionScaleBias;// Offset: 1088 Size:    16
//   float3 InstancedView_InstancedView_RelativePreViewTranslation;// Offset: 1152 Size:    12
//   float4 InstancedView_InstancedView_ViewRectMin;// Offset: 1984 Size:    16
//   float4 InstancedView_InstancedView_ViewSizeAndInvSize;// Offset: 2000 Size:    16
//   float4 InstancedView_InstancedView_NormalOverrideParameter;// Offset: 2128 Size:    16
//   float2 InstancedView_InstancedView_RoughnessOverrideParameter;// Offset: 2144 Size:     8
//
// }
//
// cbuffer ReflectionCapture
// {
//
//   float4 ReflectionCapture_ReflectionCapture_CaptureProperties[341];// Offset: 10912 Size:  5456
//
// }
//
// cbuffer OpaqueBasePass
// {
//
//   uint OpaqueBasePass_OpaqueBasePass_Shared_Forward_NumLocalLights;// Offset:    0 Size:     4
//   uint OpaqueBasePass_OpaqueBasePass_Shared_Forward_HasDirectionalLight;// Offset:    8 Size:     4
//   int3 OpaqueBasePass_OpaqueBasePass_Shared_Forward_CulledGridSize;// Offset:   16 Size:    12
//   uint OpaqueBasePass_OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;// Offset:   32 Size:     4
//   float3 OpaqueBasePass_OpaqueBasePass_Shared_Forward_LightGridZParams;// Offset:   48 Size:    12
//   float3 OpaqueBasePass_OpaqueBasePass_Shared_Forward_DirectionalLightDirection;// Offset:   64 Size:    12
//   float3 OpaqueBasePass_OpaqueBasePass_Shared_Forward_DirectionalLightColor;// Offset:   80 Size:    12
//   uint OpaqueBasePass_OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;// Offset:   96 Size:     4
//   float2 OpaqueBasePass_OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;// Offset:  104 Size:     8
//   uint OpaqueBasePass_OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;// Offset:  576 Size:     4
//   uint OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_NumLocalLights;// Offset:  656 Size:     4
//   uint OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;// Offset:  664 Size:     4
//   int3 OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_CulledGridSize;// Offset:  672 Size:    12
//   uint OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;// Offset:  688 Size:     4
//   float3 OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_LightGridZParams;// Offset:  704 Size:    12
//   float3 OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;// Offset:  720 Size:    12
//   float3 OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;// Offset:  736 Size:    12
//   uint OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;// Offset:  752 Size:     4
//   float2 OpaqueBasePass_OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;// Offset:  760 Size:     8
//   float OpaqueBasePass_OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;// Offset: 1868 Size:     4
//   int OpaqueBasePass_OpaqueBasePass_UseForwardScreenSpaceShadowMask;// Offset: 2112 Size:     4
//
// }
//
// cbuffer Material
// {
//
//   float4 Material_Material_PreshaderBuffer[2];// Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// View_SharedBilinearClampedSampler    sampler      NA          NA             s0      1 
// OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler    sampler      NA          NA             s1      1 
// OpaqueBasePass_DBufferATextureSampler    sampler      NA          NA             s2      1 
// View_PrimitiveSceneData           texture    byte         r/o             t0      1 
// View_VolumetricLightmapIndirectionTexture    texture   uint4          3d             t1      1 
// View_DirectionalLightShadowingBrickTexture    texture  float4          3d             t2      1 
// OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer    texture  float4         buf             t3      1 
// OpaqueBasePass_Shared_Forward_NumCulledLightsGrid    texture   uint4         buf             t4      1 
// OpaqueBasePass_Shared_Forward_CulledLightDataGrid    texture   uint4         buf             t5      1 
// OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer    texture  float4         buf             t6      1 
// OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid    texture   uint4         buf             t7      1 
// OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid    texture   uint4         buf             t8      1 
// OpaqueBasePass_Shared_Reflection_ReflectionCubemap    texture  float4   cubearray             t9      1 
// OpaqueBasePass_Shared_Fog_IntegratedLightScattering    texture  float4          3d            t10      1 
// OpaqueBasePass_Shared_FogISR_IntegratedLightScattering    texture  float4          3d            t11      1 
// OpaqueBasePass_DBufferATexture    texture  float4          2d            t12      1 
// OpaqueBasePass_DBufferBTexture    texture  float4          2d            t13      1 
// OpaqueBasePass_DBufferCTexture    texture  float4          2d            t14      1 
// OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture    texture  float4          2d            t15      1 
// OpaqueBasePass_IndirectOcclusionTexture    texture  float4          2d            t16      1 
// OpaqueBasePass_ResolvedSceneDepthTexture    texture  float4          2d            t17      1 
// View                              cbuffer      NA          NA            cb0      1 
// InstancedView                     cbuffer      NA          NA            cb1      1 
// ReflectionCapture                 cbuffer      NA          NA            cb2      1 
// OpaqueBasePass                    cbuffer      NA          NA            cb3      1 
// Material                          cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           2     NONE    uint   x   
// PRIMITIVE_ID             0    y          2     NONE    uint    y  
// TEXCOORD                 7   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[239], immediateIndexed
dcl_constantbuffer CB1[135], immediateIndexed
dcl_constantbuffer CB2[1023], dynamicIndexed
dcl_constantbuffer CB3[133], immediateIndexed
dcl_constantbuffer CB4[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_raw t0
dcl_resource_texture3d (uint,uint,uint,uint) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (uint,uint,uint,uint) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (uint,uint,uint,uint) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_texturecubearray (float,float,float,float) t9
dcl_resource_texture3d (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t17
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps constant v2.x
dcl_input_ps constant v2.y
dcl_input_ps linear v3.xyzw
dcl_input_ps_siv linear noperspective v4.xyzw, position
dcl_output o0.xyzw
dcl_temps 30
if_z v2.x
  mov r0.x, cb0[44].x
  mov r0.y, cb0[45].x
  mov r0.z, cb0[46].x
  mov r0.w, cb0[47].x
  mov r1.x, cb0[44].y
  mov r1.y, cb0[45].y
  mov r1.z, cb0[46].y
  mov r1.w, cb0[47].y
  mov r2.x, cb0[44].z
  mov r2.y, cb0[45].z
  mov r2.z, cb0[46].z
  mov r2.w, cb0[47].z
  mov r3.x, cb0[44].w
  mov r3.y, cb0[45].w
  mov r3.z, cb0[46].w
  mov r3.w, cb0[47].w
  mov r4.x, cb0[4].x
  mov r4.y, cb0[5].x
  mov r4.z, cb0[6].x
  mov r4.w, cb0[7].x
  mov r5.x, cb0[4].y
  mov r5.y, cb0[5].y
  mov r5.z, cb0[6].y
  mov r5.w, cb0[7].y
  mov r6.x, cb0[4].w
  mov r6.y, cb0[5].w
  mov r6.z, cb0[6].w
  mov r6.w, cb0[7].w
  mov r7.xyz, cb0[62].xyzx
  mov r9.xyz, -cb0[61].xyzx
  mov r10.xyz, -cb0[60].xyzx
  mov r11.xyz, cb0[72].xyzx
  mov r12.xyzw, cb0[68].xyzw
  mov r13.xy, cb0[124].xyxx
  mov r13.zw, cb0[125].zzzw
  mov r7.w, cb0[31].w
  mov r8.xyzw, cb0[133].xyzw
  mov r9.w, cb0[134].x
  mov r10.w, cb0[134].y
else 
  mov r0.x, cb1[44].x
  mov r0.y, cb1[45].x
  mov r0.z, cb1[46].x
  mov r0.w, cb1[47].x
  mov r1.x, cb1[44].y
  mov r1.y, cb1[45].y
  mov r1.z, cb1[46].y
  mov r1.w, cb1[47].y
  mov r2.x, cb1[44].z
  mov r2.y, cb1[45].z
  mov r2.z, cb1[46].z
  mov r2.w, cb1[47].z
  mov r3.x, cb1[44].w
  mov r3.y, cb1[45].w
  mov r3.z, cb1[46].w
  mov r3.w, cb1[47].w
  mov r4.x, cb1[4].x
  mov r4.y, cb1[5].x
  mov r4.z, cb1[6].x
  mov r4.w, cb1[7].x
  mov r5.x, cb1[4].y
  mov r5.y, cb1[5].y
  mov r5.z, cb1[6].y
  mov r5.w, cb1[7].y
  mov r6.x, cb1[4].w
  mov r6.y, cb1[5].w
  mov r6.z, cb1[6].w
  mov r6.w, cb1[7].w
  mov r7.xyz, cb1[62].xyzx
  mov r9.xyz, -cb1[61].xyzx
  mov r10.xyz, -cb1[60].xyzx
  mov r11.xyz, cb1[72].xyzx
  mov r12.xyzw, cb1[68].xyzw
  mov r13.xy, cb1[124].xyxx
  mov r13.zw, cb1[125].zzzw
  mov r7.w, cb1[31].w
  mov r8.xyzw, cb1[133].xyzw
  mov r9.w, cb1[134].x
  mov r10.w, cb1[134].y
endif 
add r13.xy, -r13.xyxx, v4.xyxx
mad r13.zw, r13.xxxy, r13.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r14.xy, r13.zwzz, v4.wwww
mov r14.z, v4.w
mul r14.xyw, r14.xyxz, l(2.000000, -2.000000, 0.000000, 1.000000)
mov r15.xyz, v4.xyzx
mov r15.w, l(1.000000)
dp4 r0.x, r15.xyzw, r0.xyzw
dp4 r0.y, r15.xyzw, r1.xyzw
dp4 r0.z, r15.xyzw, r2.xyzw
dp4 r0.w, r15.xyzw, r3.xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, -r11.xyzx, r0.xyzx
ge r0.w, r7.w, l(1.000000)
dp3 r1.w, -r0.xyzx, -r0.xyzx
rsq r1.w, r1.w
mul r2.xyz, -r0.xyzx, r1.wwww
movc r2.xyz, r0.wwww, -r7.xyzx, r2.xyzx
mad r3.xyz, r8.wwww, l(0.000000, 0.000000, 1.000000, 0.000000), r8.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mul r7.xyz, v0.yzxy, v1.zxyz
mad r7.xyz, v1.yzxy, v0.zxyz, -r7.xyzx
mul r7.xyz, r7.xyzx, v1.wwww
mul r7.xyz, r3.yyyy, r7.xyzx
mad r3.xyw, r3.xxxx, v0.xyxz, r7.xyxz
mad r3.xyz, r3.zzzz, v1.xyzx, r3.xywx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mad r7.x, r10.w, l(0.500000), r9.w
imul null, r0.w, v2.y, l(40)
ishl r1.w, r0.w, l(4)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.w, r1.w, t0.xxxx
and r8.xyzw, r2.wwww, l(8, 4, 1024, 2048)
ine r3.w, r8.x, l(0)
lt r7.w, l(0.000000), cb0[190].w
and r3.w, r3.w, r7.w
mul r11.xy, v4.xyxx, cb0[127].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r15.xyzw, r11.xyxx, t12.xyzw, s2, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r16.xyzw, r11.xyxx, t13.xyzw, s2, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r11.xyzw, r11.xyxx, t14.xyzw, s2, l(0.000000)
mad r17.x, r7.x, r11.w, r11.z
mad r17.y, r11.w, l(0.500000), r11.y
mad r11.yzw, r15.wwww, l(0.000000, 0.030584, 0.011156, 0.001831), r15.xxyz
add r15.xyz, r16.xyzx, r16.xyzx
mad r15.xyz, r3.xyzx, r16.wwww, r15.xyzx
add r15.xyz, r15.xyzx, l(-1.003922, -1.003922, -1.003922, 0.000000)
dp3 r7.w, r15.xyzx, r15.xyzx
rsq r7.w, r7.w
mul r15.xyz, r7.wwww, r15.xyzx
movc r11.yzw, r3.wwww, r11.yyzw, l(0,0.030584,0.011156,0.001831)
movc r3.xyz, r3.wwww, r15.xyzx, r3.xyzx
mov r17.z, r11.x
mov r7.yz, l(0,0.500000,0,0)
movc r7.xyz, r3.wwww, r17.xyzx, r7.xyzx
if_nz r8.y
  mad r15.xyz, r10.xyzx, l(-2097152.000000, -2097152.000000, -2097152.000000, 0.000000), r1.xyzx
  mad r15.xyz, r15.xyzx, cb0[226].xyzx, cb0[227].xyzx
  max r15.xyz, r15.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r15.xyz, r15.xyzx, l(0.990000, 0.990000, 0.990000, 0.000000)
  mul r15.xyz, r15.xyzx, cb0[228].xyzx
  ftoi r16.xyz, r15.xyzx
  mov r16.w, l(0)
  ld_indexable(texture3d)(uint,uint,uint,uint) r16.xyzw, r16.xyzw, t1.xyzw
  utof r16.xyzw, r16.xyzw
  add r3.w, l(1.000000), cb0[228].w
  div r15.xyz, r15.xyzx, r16.wwww
  frc r15.xyz, r15.xyzx
  mul r15.xyz, r15.xyzx, cb0[228].wwww
  mad r15.xyz, r16.xyzx, r3.wwww, r15.xyzx
  add r15.xyz, r15.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r15.xyz, r15.xyzx, cb0[229].xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r15.x, r15.xyzx, t2.xyzw, s0, l(0.000000)
else 
  mov r15.x, l(1.000000)
endif 
mad r16.xyz, -r11.yzwy, r7.zzzz, r11.yzwy
mad r16.xyz, r16.xyzx, cb0[131].wwww, cb0[131].xyzx
mul r3.w, r7.y, l(0.080000)
mad r11.xyz, -r7.yyyy, l(0.080000, 0.080000, 0.080000, 0.000000), r11.yzwy
mad r7.yzw, r7.zzzz, r11.xxyz, r3.wwww
mad r7.yzw, r7.yyzw, cb0[132].wwww, cb0[132].xxyz
ne r3.w, l(0.000000), cb0[178].w
mad r11.xyz, r7.yzwy, l(0.450000, 0.450000, 0.450000, 0.000000), r16.xyzx
movc r11.xyz, r3.wwww, r11.xyzx, r16.xyzx
movc r7.yzw, r3.wwww, l(0,0,0,0), r7.yyzw
div r8.xy, r14.xyxx, r14.wwww
mad r8.xy, r8.xyxx, r12.xyxx, r12.wzww
ilt r3.w, l(1), cb0[130].x
if_nz r3.w
  mul r12.xy, r8.xyxx, cb0[127].xyxx
  round_z r12.xy, r12.xyxx
  ftoi r12.xy, r12.xyxx
  mov r12.z, l(0)
  ld_indexable(texture2d)(float,float,float,float) r3.w, r12.xyzz, t17.yzwx
  mad r9.w, r3.w, cb0[67].x, cb0[67].y
  mad r3.w, r3.w, cb0[67].z, -cb0[67].w
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
  add r3.w, r3.w, r9.w
  mad r3.w, -r14.z, l(1.000000), r3.w
  div r3.w, |r3.w|, r14.w
  lt r3.w, l(0.010000), r3.w
  if_nz r3.w
    mov r16.x, -cb0[127].z
    mov r16.yz, l(0,0,0,0)
    add r13.zw, r8.xxxy, r16.xxxy
    iadd r17.xyzw, r12.xxyy, l(1, -1, 1, -1)
    mov r12.w, r17.y
    ld_indexable(texture2d)(float,float,float,float) r3.w, r12.wyzz, t17.yzwx
    mad r9.w, r3.w, cb0[67].x, cb0[67].y
    mad r3.w, r3.w, cb0[67].z, -cb0[67].w
    div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
    add r3.w, r3.w, r9.w
    mad r3.w, -r14.z, l(1.000000), r3.w
    lt r9.w, |r3.w|, l(100000000.000000)
    movc r13.zw, r9.wwww, r13.zzzw, r8.xxxy
    min r3.w, |r3.w|, l(100000000.000000)
    mov r16.w, cb0[127].w
    add r14.xy, r8.xyxx, r16.zwzz
    mov r16.xz, r12.xxzx
    mov r16.yw, r17.zzzw
    ld_indexable(texture2d)(float,float,float,float) r9.w, r16.xyzz, t17.yzwx
    mad r10.w, r9.w, cb0[67].x, cb0[67].y
    mad r9.w, r9.w, cb0[67].z, -cb0[67].w
    div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
    add r9.w, r9.w, r10.w
    mad r9.w, -r14.z, l(1.000000), r9.w
    lt r10.w, |r9.w|, r3.w
    movc r12.xw, r10.wwww, r14.xxxy, r13.zzzw
    min r3.w, r3.w, |r9.w|
    mov r18.x, cb0[127].z
    mov r18.yz, l(0,0,0,0)
    add r13.zw, r8.xxxy, r18.xxxy
    mov r17.yzw, r12.yyzz
    ld_indexable(texture2d)(float,float,float,float) r9.w, r17.xyzw, t17.yzwx
    mad r10.w, r9.w, cb0[67].x, cb0[67].y
    mad r9.w, r9.w, cb0[67].z, -cb0[67].w
    div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
    add r9.w, r9.w, r10.w
    mad r9.w, -r14.z, l(1.000000), r9.w
    lt r10.w, |r9.w|, r3.w
    movc r12.xy, r10.wwww, r13.zwzz, r12.xwxx
    mov r18.w, -cb0[127].w
    add r12.zw, r8.xxxy, r18.zzzw
    ld_indexable(texture2d)(float,float,float,float) r10.w, r16.xwzz, t17.yzwx
    mad r11.w, r10.w, cb0[67].x, cb0[67].y
    mad r10.w, r10.w, cb0[67].z, -cb0[67].w
    div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
    add r10.w, r10.w, r11.w
    mad r10.w, -r14.z, l(1.000000), r10.w
    min r3.w, r3.w, |r9.w|
    lt r3.w, |r10.w|, r3.w
    movc r8.xy, r3.wwww, r12.zwzz, r12.xyxx
  endif 
endif 
resinfo_indexable(texture2d)(float,float,float,float)_uint r12.xy, l(0), t16.xyzw
if_z v2.x
  mov r3.w, cb3[2].x
  mov r9.w, cb3[3].x
  mov r10.w, cb3[3].y
  mov r11.w, cb3[3].z
  mov r12.z, cb3[1].z
else 
  mov r3.w, cb3[43].x
  mov r9.w, cb3[44].x
  mov r10.w, cb3[44].y
  mov r11.w, cb3[44].z
  mov r12.z, cb3[42].z
endif 
mul r13.xy, r13.xyxx, cb0[126].zwzz
ftou r13.xy, r13.xyxx
ushr r13.xy, r13.xyxx, r3.wwww
if_z v2.x
  mov r13.zw, cb3[1].xxxy
else 
  mov r13.zw, cb3[42].xxxy
endif 
mad r3.w, v4.w, r9.w, r10.w
log r3.w, r3.w
mul r3.w, r11.w, r3.w
max r3.w, r3.w, l(0.000000)
ftou r3.w, r3.w
iadd r9.w, r12.z, l(-1)
umin r3.w, r3.w, r9.w
imad r3.w, r3.w, r13.w, r13.y
imad r3.w, r3.w, r13.z, r13.x
if_nz cb3[132].x
  mul r12.zw, r8.xxxy, cb0[127].xxxy
  round_z r12.zw, r12.zzzw
  ftoi r13.xy, r12.zwzz
  mov r13.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r13.xyzw, r13.xyzw, t15.xyzw
else 
  mov r13.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif 
mul r13.xyzw, r13.xyzw, r13.xyzw
movc r8.zw, r8.zzzw, l(0,0,1,1), l(0,0,0,0)
imad r8.z, r8.w, l(2), r8.z
and r14.xyz, r2.wwww, l(4096, 128, 256, 0)
movc r14.xyz, r14.xyzx, l(1,2.000000,1.000000,0), l(0,0,0,0)
imad r2.w, r14.x, l(4), r8.z
if_z v2.x
  mov r16.xyz, cb3[5].xyzx
  mov r17.xyz, cb3[4].xyzx
  mov r8.z, cb3[0].z
  mov r8.w, cb3[6].x
  mov r9.w, cb3[6].z
  mov r10.w, cb3[6].w
else 
  mov r16.xyz, cb3[46].xyzx
  mov r17.xyz, cb3[45].xyzx
  mov r8.z, cb3[41].z
  mov r8.w, cb3[47].x
  mov r9.w, cb3[47].z
  mov r10.w, cb3[47].w
endif 
if_nz r8.z
  and r18.xyzw, r8.wwww, l(1, 2, 4, 8)
  movc r18.xyzw, r18.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
  ushr r12.zw, r8.wwww, l(0, 0, 4, 8)
  ubfe r8.z, l(1), l(4), r8.w
  movc r19.x, r8.z, l(1.000000), l(0)
  and r20.xyz, r12.zzzz, l(2, 4, 8, 0)
  movc r19.yzw, r20.xxyz, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
  dp4 r8.z, r19.xyzw, r13.xyzw
  lt r11.w, r10.w, l(0.000000)
  movc r12.z, r11.w, l(1.000000), r8.z
  and r8.w, r8.w, l(255)
  movc r8.w, r8.w, l(1), l(0)
  if_nz r8.w
    mad_sat r8.w, r14.w, r9.w, r10.w
    movc r8.z, r11.w, r8.z, l(1.000000)
    mov r15.y, l(1.000000)
    dp4 r9.w, r15.xyyy, r18.xyzw
    dp4 r10.w, r18.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
    add r9.w, r9.w, l(-1.000000)
    mad r9.w, r10.w, r9.w, l(1.000000)
    mul r8.w, r8.w, r8.w
    add r9.w, -r8.z, r9.w
    mad r8.z, r8.w, r9.w, r8.z
    min r8.w, r12.z, r8.z
    mul r18.xy, r12.zzzz, r8.wzww
  else 
    mov r18.xy, l(1.000000,1.000000,0,0)
  endif 
  add r8.z, r18.x, r18.y
  lt r8.z, l(0.000000), r8.z
  if_nz r8.z
    max r8.z, r7.x, cb0[238].z
    dp3 r8.w, r17.xyzx, r17.xyzx
    rsq r8.w, r8.w
    mul r17.xyz, r8.wwww, r17.xyzx
    dp3 r8.w, r3.xyzx, r17.xyzx
    mov_sat r9.w, r8.w
    dp3 r10.w, r3.xyzx, r2.xyzx
    dp3 r11.w, r2.xyzx, r17.xyzx
    mad r12.z, r11.w, l(2.000000), l(2.000000)
    rsq r12.z, r12.z
    add r8.w, r8.w, r10.w
    mul_sat r8.w, r12.z, r8.w
    add r10.w, |r10.w|, l(0.000010)
    min r10.w, r10.w, l(1.000000)
    mul r14.x, r8.z, r8.z
    mul r14.w, r14.x, r14.x
    mad r15.y, r8.w, r14.w, -r8.w
    mad r8.w, r15.y, r8.w, l(1.000000)
    mad r8.z, -r8.z, r8.z, l(1.000000)
    mad_sat r11.w, r12.z, r11.w, r12.z
    add r11.w, -r11.w, l(1.000000)
    mul r12.z, r11.w, r11.w
    mul r12.z, r12.z, r12.z
    mul r15.y, r11.w, r12.z
    mul r16.xyz, r16.xyzx, r18.yyyy
    mul r17.xyz, r9.wwww, r11.xyzx
    mul r17.xyz, r16.xyzx, r17.xyzx
    mul r17.xyz, r17.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
    mul_sat r15.w, r7.z, l(50.000000)
    mad r11.w, -r12.z, r11.w, l(1.000000)
    mul r18.xyz, r7.yzwy, r11.wwww
    mad r18.xyz, r15.wwww, r15.yyyy, r18.xyzx
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, l(3.141593)
    div r8.w, r14.w, r8.w
    mad r11.w, r10.w, r8.z, r14.x
    mad r8.z, r9.w, r8.z, r14.x
    mul r8.z, r8.z, r10.w
    mad r8.z, r9.w, r11.w, r8.z
    div r8.z, l(0.500000), r8.z
    mul r8.z, r8.z, r8.w
    mul r18.xyz, r8.zzzz, r18.xyzx
    mul r18.xyz, r9.wwww, r18.xyzx
    mul r16.xyz, r16.xyzx, r18.xyzx
  else 
    mov r17.xyz, l(0,0,0,0)
    mov r16.xyz, l(0,0,0,0)
  endif 
  and r8.z, r2.w, r12.w
  movc r17.xyz, r8.zzzz, r17.xyzx, l(0,0,0,0)
  movc r16.xyz, r8.zzzz, r16.xyzx, l(0,0,0,0)
else 
  mov r17.xyz, l(0,0,0,0)
  mov r16.xyz, l(0,0,0,0)
endif 
if_z v2.x
  ishl r8.z, r3.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r8.z, r8.zzzz, t4.yzxw
  umin r8.z, r8.z, cb3[0].x
  bfi r8.w, l(31), l(1), r3.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r8.wwww, t4.yzwx
else 
  ishl r9.w, r3.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r9.w, r9.wwww, t7.yzwx
  umin r8.z, r9.w, cb3[41].x
  bfi r3.w, l(31), l(1), r3.w, l(1)
  ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r3.wwww, t7.yzwx
endif 
movc r3.w, v2.x, cb3[41].x, cb3[0].x
umin r3.w, r3.w, r8.z
max r8.z, r7.x, cb0[238].z
dp3 r9.w, -r2.xyzx, r3.xyzx
add r9.w, r9.w, r9.w
mad r18.xyz, r3.xyzx, -r9.wwww, -r2.xyzx
max r9.w, r8.z, cb0[238].z
mad r9.w, -r9.w, r9.w, l(1.000000)
dp3 r10.w, r3.xyzx, r2.xyzx
add r11.w, r10.w, r10.w
mad r12.z, r11.w, r10.w, l(-1.000000)
add r12.w, |r10.w|, l(0.000010)
min r12.w, r12.w, l(1.000000)
mul r8.z, r8.z, r8.z
mul r14.x, r8.z, r8.z
mul r14.w, r7.z, l(50.000000)
mov_sat r14.w, r14.w
mul r19.xyz, r11.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
mov r15.z, l(1.000000)
mov r20.x, l(1.000000)
mov r21.xyz, r17.xyzx
mov r22.xyz, r16.xyzx
mov r15.y, l(0)
loop 
  uge r15.w, r15.y, r3.w
  breakc_nz r15.w
  iadd r15.w, r8.w, r15.y
  if_z v2.x
    ld_indexable(buffer)(uint,uint,uint,uint) r16.w, r15.wwww, t5.yzwx
    imul null, r17.w, r16.w, l(6)
    ld_indexable(buffer)(float,float,float,float) r23.xyzw, r17.wwww, t3.xyzw
    imad r17.w, r16.w, l(6), l(1)
    ld_indexable(buffer)(float,float,float,float) r24.xyzw, r17.wwww, t3.xyzw
    imad r25.xyz, r16.wwww, l(6, 6, 6, 0), l(3, 2, 4, 0)
    ld_indexable(buffer)(float,float,float,float) r26.xyzw, r25.xxxx, t3.xyzw
    ld_indexable(buffer)(float,float,float,float) r27.xyzw, r25.yyyy, t3.xyzw
    ld_indexable(buffer)(float,float,float,float) r25.xyzw, r25.zzzz, t3.xyzw
  else 
    ld_indexable(buffer)(uint,uint,uint,uint) r15.w, r15.wwww, t8.yzwx
    imul null, r16.w, r15.w, l(6)
    ld_indexable(buffer)(float,float,float,float) r23.xyzw, r16.wwww, t6.xyzw
    imad r16.w, r15.w, l(6), l(1)
    ld_indexable(buffer)(float,float,float,float) r24.xyzw, r16.wwww, t6.xyzw
    imad r28.xyz, r15.wwww, l(6, 6, 6, 0), l(3, 2, 4, 0)
    ld_indexable(buffer)(float,float,float,float) r26.xyzw, r28.xxxx, t6.xyzw
    ld_indexable(buffer)(float,float,float,float) r27.xyzw, r28.yyyy, t6.xyzw
    ld_indexable(buffer)(float,float,float,float) r25.xyzw, r28.zzzz, t6.xyzw
  endif 
  eq r15.w, r24.w, l(0.000000)
  add r23.xyz, -r0.xyzx, r23.xyzx
  dp3 r16.w, r23.xyzx, r23.xyzx
  mul r17.w, r23.w, r23.w
  mul r17.w, r16.w, r17.w
  mad r17.w, -r17.w, r17.w, l(1.000000)
  max r17.w, r17.w, l(0.000000)
  mul r17.w, r17.w, r17.w
  mul r28.xyz, r23.wwww, r23.xyzx
  dp3 r18.w, r28.xyzx, r28.xyzx
  min r18.w, r18.w, l(1.000000)
  add r18.w, -r18.w, l(1.000000)
  log r18.w, r18.w
  mul r18.w, r18.w, r24.w
  exp r18.w, r18.w
  movc r17.w, r15.w, r17.w, r18.w
  lt r18.w, l(-2.000000), r26.x
  rsq r16.w, r16.w
  mul r28.xyz, r16.wwww, r23.xyzx
  dp3 r16.w, r28.xyzx, r27.xyzx
  add r16.w, -r26.x, r16.w
  mul_sat r16.w, r26.y, r16.w
  mul r16.w, r16.w, r16.w
  mul r16.w, r16.w, r17.w
  movc r16.w, r18.w, r16.w, r17.w
  lt r17.w, l(0.000000), r16.w
  if_nz r17.w
    and r17.w, r27.w, l(255)
    movc r17.w, r17.w, l(1), l(0)
    if_nz r17.w
      and r28.xyzw, r27.wwww, l(1, 2, 4, 8)
      movc r28.xyzw, r28.xyzw, l(1.000000,1.000000,1.000000,1.000000), l(0,0,0,0)
      ushr r17.w, r27.w, l(4)
      ubfe r18.w, l(1), l(4), r27.w
      movc r29.x, r18.w, l(1.000000), l(0)
      and r27.xyz, r17.wwww, l(2, 4, 8, 0)
      movc r29.yzw, r27.xxyz, l(0,1.000000,1.000000,1.000000), l(0,0,0,0)
      dp4 r17.w, r29.xyzw, r13.xyzw
      dp4 r18.w, r15.xzzz, r28.xyzw
      dp4 r19.w, r28.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
      add r18.w, r18.w, l(-1.000000)
      mad r18.w, r19.w, r18.w, l(1.000000)
      mul r17.w, r17.w, r18.w
    else 
      mov r17.w, l(1.000000)
    endif 
    lt r18.w, l(0.000000), r17.w
    if_nz r18.w
      and r18.w, r26.w, l(0x0000ffff)
      f16tof32 r18.w, r18.w
      mul r19.w, r18.w, l(0.500000)
      mad r26.xyw, -r25.xyxz, r19.wwww, r23.xyxz
      mad r23.xyz, r25.xyzx, r19.wwww, r23.xyzx
      lt r19.w, l(0.000000), r18.w
      if_nz r19.w
        dp3 r20.z, r26.xywx, r26.xywx
        rsq r20.z, r20.z
        dp3 r20.w, r23.xyzx, r23.xyzx
        rsq r20.w, r20.w
        mul r21.w, r20.w, r20.z
        dp3 r22.w, r26.xywx, r23.xyzx
        mul r22.w, r21.w, r22.w
        dp3 r23.w, r3.xyzx, r26.xywx
        dp3 r24.w, r3.xyzx, r23.xyzx
        mul r20.w, r20.w, r24.w
        mad r20.z, r23.w, r20.z, r20.w
        mul r20.z, r20.z, l(0.500000)
        mad r20.w, r22.w, l(0.500000), r21.w
        add r20.w, r20.w, l(0.500000)
        div r20.w, r21.w, r20.w
      else 
        dp3 r21.w, r26.xywx, r26.xywx
        rsq r23.w, r21.w
        mul r25.xyz, r23.wwww, r26.xywx
        dp3 r20.z, r3.xyzx, r25.xyzx
        add r21.w, r21.w, l(1.000000)
        div r20.w, l(1.000000, 1.000000, 1.000000, 1.000000), r21.w
        mov r22.w, l(1.000000)
      endif 
      lt r21.w, l(0.000000), r26.z
      mul r23.w, r26.z, r26.z
      mul_sat r23.w, r20.w, r23.w
      sqrt r23.w, r23.w
      lt r24.w, r20.z, r23.w
      max r25.x, r20.z, -r23.w
      add r25.x, r23.w, r25.x
      mul r25.x, r25.x, r25.x
      mul r23.w, r23.w, l(4.000000)
      div r23.w, r25.x, r23.w
      movc r23.w, r24.w, r23.w, r20.z
      movc_sat r20.z, r21.w, r23.w, r20.z
      add r23.xyz, -r26.xywx, r23.xyzx
      dp3 r21.w, r18.xyzx, r23.xyzx
      mad r25.xyz, r18.xyzx, r21.wwww, -r23.xyzx
      dp3 r23.w, r26.xywx, r25.xyzx
      mul r21.w, r21.w, r21.w
      mad r18.w, r18.w, r18.w, -r21.w
      div_sat r18.w, r23.w, r18.w
      mad r23.xyz, r23.xyzx, r18.wwww, r26.xywx
      movc r23.xyz, r19.wwww, r23.xyzx, r26.xywx
      dp3 r18.w, r23.xyzx, r23.xyzx
      rsq r18.w, r18.w
      mul r23.xyz, r18.wwww, r23.xyzx
      mul r19.w, r18.w, r26.z
      mul_sat r19.w, r9.w, r19.w
      mul_sat r18.w, r18.w, r25.w
      dp3 r21.w, r3.xyzx, r23.xyzx
      dp3 r23.x, r2.xyzx, r23.xyzx
      mad r23.y, r23.x, l(2.000000), l(2.000000)
      rsq r23.y, r23.y
      lt r23.z, l(0.000000), r19.w
      if_nz r23.z
        mad r23.w, -r19.w, r19.w, l(1.000000)
        sqrt r23.w, r23.w
        dp2 r24.w, r10.wwww, r21.wwww
        add r25.x, -r23.x, r24.w
        ge r25.y, r25.x, r23.w
        if_nz r25.y
          mov r25.y, l(1.000000)
          mov r25.z, |r10.w|
        else 
          mad r25.w, -r25.x, r25.x, l(1.000000)
          rsq r25.w, r25.w
          mul r25.w, r19.w, r25.w
          mad r26.x, -r25.x, r21.w, r10.w
          mul r26.y, r25.w, r26.x
          mad r25.x, -r25.x, r23.x, r12.z
          mul r25.x, r25.x, r25.w
          mul r26.z, r21.w, r21.w
          mad r26.z, -r10.w, r10.w, -r26.z
          add r26.z, r26.z, l(1.000000)
          mad r26.z, -r23.x, r23.x, r26.z
          mad_sat r24.w, r24.w, r23.x, r26.z
          sqrt r24.w, r24.w
          mul r24.w, r24.w, r25.w
          mul r26.z, r10.w, r24.w
          add r26.w, r26.z, r26.z
          mad r27.x, r21.w, r23.w, r10.w
          mad r25.w, r25.w, r26.x, r27.x
          mad r26.x, r23.x, r23.w, r25.x
          add r26.x, r26.x, l(1.000000)
          mul r27.y, r24.w, r26.x
          mul r27.z, r25.w, r26.x
          mul r28.x, r25.w, r26.w
          mul r26.z, r26.z, r25.w
          mul r26.z, r26.z, l(0.500000)
          mad r26.z, r27.y, l(-0.500000), r26.z
          mad r28.y, -r27.y, l(2.000000), r28.x
          mul r28.x, r28.y, r28.x
          mad r27.y, r27.y, r27.y, r28.x
          mul r28.x, r26.x, r26.x
          mad r26.x, r23.x, r23.w, r26.x
          mad r26.x, r26.x, l(-0.500000), l(-0.500000)
          mul r26.xz, r26.xxzx, r27.zzzz
          mad r26.x, r27.x, r28.x, r26.x
          mad r25.w, r25.w, r26.x, r27.y
          add r26.x, r26.z, r26.z
          mul r27.x, r26.z, r26.z
          mad r27.x, r25.w, r25.w, r27.x
          div r26.x, r26.x, r27.x
          mul r25.w, r25.w, r26.x
          mad r26.x, -r26.x, r26.z, l(1.000000)
          mul r26.z, r26.w, r25.w
          mad r25.x, r26.x, r25.x, r26.z
          mad r25.x, r23.x, r23.w, r25.x
          mad r26.z, r25.x, l(2.000000), l(2.000000)
          rsq r26.z, r26.z
          mul r24.w, r24.w, r25.w
          mad r24.w, r26.x, r26.y, r24.w
          mad r23.w, r21.w, r23.w, r24.w
          add r23.w, r10.w, r23.w
          mul_sat r25.y, r26.z, r23.w
          mad_sat r25.z, r26.z, r25.x, r26.z
        endif 
      else 
        add r21.w, r10.w, r21.w
        mul_sat r25.y, r23.y, r21.w
        mad_sat r25.z, r23.y, r23.x, r23.y
      endif 
      movc r15.w, r15.w, r20.w, l(1.000000)
      mul r15.w, r20.z, r15.w
      lt r20.w, l(0.000000), r18.w
      mul r18.w, r18.w, r18.w
      mad r21.w, r25.z, l(3.600000), l(0.400000)
      div r18.w, r18.w, r21.w
      mad r18.w, r8.z, r8.z, r18.w
      min r18.w, r18.w, l(1.000000)
      movc r20.y, r20.w, r18.w, r14.x
      mul r18.w, r19.w, l(0.250000)
      ishr r20.w, r20.y, l(1)
      iadd r20.w, r20.w, l(0x1fbd1df5)
      mad r19.w, r20.w, l(3.000000), r19.w
      mul r18.w, r18.w, r19.w
      add r19.w, r25.z, l(0.001000)
      div r18.w, r18.w, r19.w
      add r23.y, r18.w, r20.y
      div r23.x, r20.y, r23.y
      movc r23.xy, r23.zzzz, r23.xyxx, r20.xyxx
      lt r18.w, r22.w, l(1.000000)
      add r20.w, -r22.w, l(1.000100)
      add r21.w, r22.w, l(1.000000)
      div r20.w, r20.w, r21.w
      sqrt r20.w, r20.w
      mul r21.w, r20.w, l(0.250000)
      ishr r22.w, r23.y, l(1)
      iadd r22.w, r22.w, l(0x1fbd1df5)
      mad r20.w, r22.w, l(3.000000), r20.w
      mul r20.w, r20.w, r21.w
      div r19.w, r20.w, r19.w
      add r19.w, r19.w, r23.y
      div r19.w, r23.y, r19.w
      sqrt r19.w, r19.w
      mul r19.w, r19.w, r23.x
      movc r18.w, r18.w, r19.w, r23.x
      mad r19.w, r25.y, r20.y, -r25.y
      mad r19.w, r19.w, r25.y, l(1.000000)
      sqrt r20.w, r20.y
      add r21.w, -r20.w, l(1.000000)
      add r22.w, -r25.z, l(1.000000)
      mul r23.x, r22.w, r22.w
      mul r23.x, r23.x, r23.x
      mul r23.y, r22.w, r23.x
      mad r22.w, -r23.x, r22.w, l(1.000000)
      mul r23.xzw, r7.yyzw, r22.wwww
      mad r23.xyz, r14.wwww, r23.yyyy, r23.xzwx
      mul r19.w, r19.w, r19.w
      mul r19.w, r19.w, l(3.141593)
      div r19.w, r20.y, r19.w
      mul r18.w, r18.w, r19.w
      mad r19.w, r12.w, r21.w, r20.w
      mad r20.y, r20.z, r21.w, r20.w
      mul r20.y, r12.w, r20.y
      mad r19.w, r20.z, r19.w, r20.y
      div r19.w, l(0.500000), r19.w
      mul r18.w, r18.w, r19.w
      mul r20.yzw, r18.wwww, r23.xxyz
      mul r20.yzw, r15.wwww, r20.yyzw
      mul r23.xyz, r16.wwww, r24.xyzx
      mul r23.xyz, r17.wwww, r23.xyzx
      mul r24.xyz, r15.wwww, r19.xyzx
      mul r24.xyz, r23.xyzx, r24.xyzx
      mul r20.yzw, r20.yyzw, r23.xxyz
    else 
      mov r24.xyz, l(0,0,0,0)
      mov r20.yzw, l(0,0,0,0)
    endif 
  else 
    mov r24.xyz, l(0,0,0,0)
    mov r20.yzw, l(0,0,0,0)
  endif 
  ushr r15.w, r27.w, l(8)
  and r15.w, r2.w, r15.w
  add r23.xyz, r21.xyzx, r24.xyzx
  add r20.yzw, r20.yyzw, r22.xxyz
  movc r21.xyz, r15.wwww, r23.xyzx, r21.xyzx
  movc r22.xyz, r15.wwww, r20.yzwy, r22.xyzx
  iadd r15.y, r15.y, l(1)
endloop 
bfi r0.x, l(28), l(4), r0.w, l(12)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, r0.x, t0.xxxx
mad r13.xyzw, r7.xxxx, l(-1.000000, -0.027500, -0.572000, 0.022000), l(1.000000, 0.042500, 1.040000, -0.040000)
mul r0.y, r13.x, r13.x
mov_sat r10.w, r10.w
mul r0.z, r10.w, l(-9.280000)
exp r0.z, r0.z
min r0.y, r0.z, r0.y
mad r0.y, r0.y, r13.x, r13.y
mad r0.yz, r0.yyyy, l(0.000000, -1.040000, 1.040000, 0.000000), r13.zzwz
lt r0.w, l(0.000000), cb3[116].w
if_nz r0.w
  add r9.xyz, r9.xyzx, -r10.xyzx
  mad r9.xyz, r9.xyzx, l(2097152.000000, 2097152.000000, 2097152.000000, 0.000000), r1.xyzx
  mov r9.w, l(1.000000)
  dp4 r4.x, r9.xyzw, r4.xyzw
  dp4 r4.y, r9.xyzw, r5.xyzw
  dp4 r0.w, r9.xyzw, r6.xyzw
  div r4.xy, r4.xyxx, r0.wwww
  mad r4.xy, r4.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r0.w, r0.w, cb0[224].x, cb0[224].y
  log r0.w, r0.w
  mul r0.w, r0.w, cb0[224].z
  mul r4.z, r0.w, cb0[223].z
  if_z v2.x
    sample_l_indexable(texture3d)(float,float,float,float) r5.xyzw, r4.xyzx, t10.xyzw, s0, l(0.000000)
  else 
    sample_l_indexable(texture3d)(float,float,float,float) r5.xyzw, r4.xyzx, t11.xyzw, s0, l(0.000000)
  endif 
  mul r4.x, r5.w, v3.w
  mad r4.yzw, v3.xxyz, r5.wwww, r5.xxyz
else 
  mov r4.xyzw, v3.wxyz
endif 
mul r5.xyz, cb4[1].yzwy, cb4[1].xxxx
max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.w, l(0.000000), cb0[135].x
if_nz r0.w
  iadd r0.w, r1.w, l(16)
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r6.xyz, r0.w, t0.xyzx
  add r6.xyz, -r6.xyzx, -r10.xyzx
  iadd r9.xyzw, r1.wwww, l(304, 288, 400, 416)
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r13.xyz, r9.x, t0.xyzx
  add r13.xyz, r1.xyzx, -r13.xyzx
  mad r6.xyz, r6.xyzx, l(2097152.000000, 2097152.000000, 2097152.000000, 0.000000), r13.xyzx
  or r9.xyz, r9.yzwy, l(44, 28, 44, 0)
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r13.x, r9.x, t0.xxxx
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r13.y, r9.y, t0.xxxx
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r13.z, r9.z, t0.xxxx
  add r9.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  lt r6.xyz, r9.xyzx, |r6.xyzx|
  or r0.w, r6.y, r6.x
  or r0.w, r6.z, r0.w
  add r1.w, -r10.y, -r10.x
  add r1.w, -r10.z, r1.w
  mul r1.w, r1.w, l(2420.113525)
  frc r1.w, r1.w
  add r1.x, r1.y, r1.x
  add r1.x, r1.z, r1.x
  mad r1.x, r1.x, l(0.001154), r1.w
  frc r1.x, r1.x
  lt r1.x, l(0.500000), r1.x
  movc r1.xyz, r1.xxxx, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r5.xyz, r0.wwww, r1.xyzx, r5.xyzx
endif 
movc r1.xyz, cb3[36].xxxx, r21.xyzx, l(0,0,0,0)
movc r6.xyz, cb3[36].xxxx, r22.xyzx, l(0,0,0,0)
add r1.xyz, r1.xyzx, r6.xyzx
mad r2.xyz, r3.xyzx, r11.wwww, -r2.xyzx
add r0.w, l(-1.000000), cb0[190].z
max r1.w, r7.x, l(0.001000)
log r1.w, r1.w
mad r1.w, -r1.w, l(1.200000), l(1.000000)
add r0.w, r0.w, -r1.w
mov r2.w, cb2[r0.x + 682].y
sample_l_indexable(texturecubearray)(float,float,float,float) r2.xyz, r2.xyzw, t9.xyzw, s1, r0.w
mul r2.xyz, r2.xyzx, cb2[r0.x + 682].xxxx
mul r2.xyz, r2.xyzx, cb0[155].xyzx
min r0.x, l(0.000000), cb0[192].z
mad_sat r0.w, r7.x, cb0[192].x, cb0[192].y
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
add r0.x, r0.x, l(-1.000000)
mad r0.x, r0.w, r0.x, l(1.000000)
mul r2.xyz, r0.xxxx, r2.xyzx
mul r0.x, r0.z, r14.w
mad r0.xyz, r7.yzwy, r0.yyyy, r0.xxxx
mul r0.xyz, r0.xyzx, r2.xyzx
utof r2.xy, r12.xyxx
mul r2.xy, r2.xyxx, r8.xyxx
round_z r2.xy, r2.xyxx
ftoi r2.xy, r2.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.w, r2.xyzw, t16.yzwx
add r1.w, r14.z, r14.y
mul r1.w, r1.w, l(1.333000)
ftou r1.w, r1.w
and r1.w, r1.w, l(2)
movc r1.w, r1.w, cb0[191].y, l(1.000000)
add r0.w, r0.w, l(-1.000000)
mad r0.w, r1.w, r0.w, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
mad r2.xyz, r7.yzwy, l(2.040400, 2.040400, 2.040400, 0.000000), l(-0.332400, -0.332400, -0.332400, 0.000000)
mad r2.xyz, r7.yzwy, l(-4.795100, -4.795100, -4.795100, 0.000000), r2.xyzx
add r2.xyz, r2.xyzx, l(0.641700, 0.641700, 0.641700, 0.000000)
mad r2.xyz, r7.yzwy, l(2.755200, 2.755200, 2.755200, 0.000000), r2.xyzx
add r2.xyz, r2.xyzx, l(0.690300, 0.690300, 0.690300, 0.000000)
max r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, r2.xyzx, r1.xyzx
mad r1.xyz, r7.yzwy, l(0.450000, 0.450000, 0.450000, 0.000000), r11.xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, cb0[140].xxxx, r1.xyzx, r0.xyzx
add r0.xyz, r5.xyzx, r0.xyzx
mad r0.xyz, r0.xyzx, r4.xxxx, r4.yzwy
mul o0.xyz, r0.xyzx, cb0[130].yyyy
mov o0.w, l(0)
ret 
// Approximately 823 instruction slots used
